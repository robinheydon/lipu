///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import ("std");

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

var log_allocator: std.mem.Allocator = undefined;
var log_verbosity: u8 = 0;
var log_quiet: bool = false;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const LogOptions = struct {
    allocator : std.mem.Allocator,
    verbosity : u8 = 0,
    quiet : bool = false,
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn init (options: LogOptions) void
{
    log_allocator = options.allocator;
    log_verbosity = options.verbosity;
    log_quiet = options.quiet;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn output (comptime label: []const u8, comptime format: []const u8, args: anytype) void
{
    var buffer = std.ArrayList (u8).init (log_allocator);
    defer buffer.deinit ();

    var writer = buffer.writer ();

    writer.print (format, args) catch return;

    var iter = std.mem.splitAny (u8, buffer.items, "\r\n");
    var count : usize = 0;
    while (iter.next ()) |line| : (count += 1)
    {
        if (count == 0)
        {
            std.debug.print ("{s:<8}: {s}\n", .{ label, line });
        }
        else
        {
            std.debug.print ("{s:<8}: {s}\n", .{ "", line });
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn err (comptime format: []const u8, args: anytype) void
{
    output ("ERROR", format, args);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn warn (comptime format: []const u8, args: anytype) void
{
    output ("Warn", format, args);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn info (comptime format: []const u8, args: anytype) void
{
    output ("info", format, args);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn debug (comptime label: []const u8, comptime format: []const u8, args: anytype) void
{
    output (label, format, args);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
