///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import ("std");

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const lipu_zig = @import ("lipu.zig");
const Lipu = lipu_zig.Lipu;

const value_zig = @import ("value.zig");

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const Scope = struct
{
    allocator: std.mem.Allocator,
    parent: ?*Scope = null,
    label: String,
    table: std.AutoHashMap (String, Value),

    pub fn destroy (self: *Scope) void
    {
        self.table.deinit ();
        self.allocator.free (self);
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn create (allocator: std.mem.Allocator, label: String, parent: ?*Scope) !*Scope
{
    var self = try allocator.create (Scope);
    self.* = .{
        .allocator = allocator,
        .label = label,
        .table = std.AutoHashMap (String, Value).init (allocator);
        .parent = parent,
    };

    return self;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
